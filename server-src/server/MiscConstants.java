package com.wurmonline.server;

import java.util.BitSet;

public interface MiscConstants {
   long NOID = -10L;
   short notInitialized = -1;
   short ACTION_DEFAULT = -1;
   short OWN_INVENTORY = -1;
   double RADS_TO_DEGS = 180.0 / Math.PI;
   float DEGS_TO_RADS = (float) (Math.PI / 180.0);
   int MAX_SHORTINT = 65535;
   int SIXTY_K = 60000;
   int FORTYFIVE_K = 45000;
   int ONE_K = 1000;
   int TWENTY_K = 20000;
   int FIVE_K = 5000;
   int TEN_K = 10000;
   int NORTHEAST = 0;
   int EASTNORTH = 1;
   int EASTSOUTH = 2;
   int SOUTHEAST = 3;
   int SOUTHWEST = 4;
   int WESTSOUTH = 5;
   int WESTNORTH = 6;
   int NORTHWEST = 7;
   byte north = 0;
   byte northeast = 1;
   byte east = 2;
   byte southeast = 3;
   byte south = 4;
   byte southwest = 5;
   byte west = 6;
   byte northwest = 7;
   byte POWER_NONE = 0;
   byte POWER_HERO = 1;
   byte POWER_DEMIGOD = 2;
   byte POWER_HIGH_GOD = 3;
   byte POWER_ARCHANGEL = 4;
   byte POWER_IMPLEMENTOR = 5;
   byte POWER_IMPOSSIBLE = 10;
   int PRIORITY_MAX = 10;
   int PRIORITY_MIN = 1;
   int PRIORITY_NORM = 5;
   int PRIORITY_FIGHT = 7;
   int PRIORITY_HIGH = 8;
   int PRIORITY_SPELL = 8;
   byte SEX_MALE = 0;
   byte SEX_FEMALE = 1;
   byte SEX_NOSEX = 127;
   int CREATURE_SIZE_HUGE = 5;
   int CREATURE_SIZE_LARGE = 4;
   int CREATURE_SIZE_MEDIUM = 3;
   int CREATURE_SIZE_SMALL = 2;
   int CREATURE_SIZE_TINY = 1;
   byte KINGDOM_NONE = 0;
   byte KINGDOM_JENN = 1;
   byte KINGDOM_MOLREHAN = 2;
   byte KINGDOM_HOTS = 3;
   byte KINGDOM_FREEDOM = 4;
   int REPUTATION_MOD_STEAL = 35;
   int REPUTATION_MOD_STEAL_KINGDOM = 10;
   int REPUTATION_MOD_KILL = 20;
   int MAX_ACCOUNTS = 5;
   double ONETHIRD = 0.3333333333333333;
   String EMPTYSTRING = "";
   String ESCAPED_DOUBLE_QUOTE_STRING = "\"";
   char ESCAPED_DOUBLE_QUOTE_CHAR = '"';
   float GROUND_LEVEL = -3000.0F;
   int AGE_YOUNG = 3;
   int AGE_ADOL = 8;
   int AGE_MATURE = 12;
   int AGE_AGED = 30;
   int AGE_OLD = 40;
   int AGE_VENER = 1000000;
   String WORD_YOUNG = "young";
   String WORD_ADOLESCENT = "adolescent";
   String WORD_MATURE = "mature";
   String WORD_AGED = "aged";
   String WORD_OLD = "old";
   String WORD_VENERABLE = "venerable";
   String WORD_FIERCE = "fierce ";
   String WORD_ANGRY = "angry ";
   String WORD_RAGING = "raging ";
   String WORD_SLOW = "slow ";
   String WORD_ALERT = "alert ";
   String WORD_GREENISH = "greenish ";
   String WORD_LURKING = "lurking ";
   String WORD_SLY = "sly ";
   String WORD_HARDENED = "hardened ";
   String WORD_SCARED = "scared ";
   String WORD_CHAMPION = "champion ";
   String WORD_DISEASED = "diseased ";
   String WORD_STARVING = "starving ";
   String WORD_FAT = "fat ";
   String CHECKWORD_FIERCE = " fierce ";
   String CHECKWORD_ANGRY = " angry ";
   String CHECKWORD_RAGING = " raging ";
   String CHECKWORD_SLOW = " slow ";
   String CHECKWORD_ALERT = " alert ";
   String CHECKWORD_GREENISH = " greenish ";
   String CHECKWORD_LURKING = " lurking ";
   String CHECKWORD_SLY = " sly ";
   String CHECKWORD_HARDENED = " hardened ";
   String CHECKWORD_SCARED = " scared ";
   String CHECKWORD_CHAMPION = " champion ";
   String CHECKWORD_DISEASED = " diseased ";
   String CHECKWORD_STARVING = " starving ";
   String CHECKWORD_FAT = " fat ";
   String HUMAN = "Human";
   String emptyString = "";
   String commaStringNsp = ",";
   String commaString = ", ";
   String andString = " and ";
   String andTheString = " and the ";
   String spaceString = " ";
   String[] emptyStringArray = new String[0];
   String MILLISECONDS_STRING = " millis.";
   String WHICH_TOOK_STRING = ", which took ";
   String GLOBALKCHAT = "GL-";
   String TRADE = "Trade";
   char SPACE_CHAR = ' ';
   String dotString = ".";
   char DOT_CHAR = '.';
   char COLON_CHAR = ':';
   char CLOSE_SQUARE_BRACKET_CHAR = ']';
   char EXCLAMATION_MARK = '!';
   char XY_COORDINATE_SEPARATOR = ',';
   byte[] EMPTY_BYTE_PRIMITIVE_ARRAY = new byte[0];
   short[] EMPTY_SHORT_PRIMITIVE_ARRAY = new short[0];
   int[] EMPTY_INT_ARRAY = new int[0];
   long[] EMPTY_LONG_PRIMITIVE_ARRAY = new long[0];
   float NANOS_IN_A_MILLISECOND = 1000000.0F;
   int MAX_TRAIT_BITS = 64;
   int MAX_ABILITIES_BITS = 64;
   int MAX_FLAGS_BITS = 64;
   int MAX_SESSIONFLAGS_BITS = 64;
   int MAX_SETTINGS_BITS = 32;
   int TRAIT_BRAVE = 0;
   int TRAIT_FAST = 1;
   int TRAIT_TOUGH = 2;
   int TRAIT_STRONG = 3;
   int TRAIT_LIGHTNING = 4;
   int TRAIT_PACK = 5;
   int TRAIT_JUMPER = 6;
   int TRAIT_WATER_DRAWN = 7;
   int TRAIT_SLOW = 8;
   int TRAIT_HALT = 9;
   int TRAIT_BITER = 10;
   int TRAIT_NAG = 11;
   int TRAIT_SURLY = 12;
   int TRAIT_SICK = 13;
   int TRAIT_RAVAGING = 14;
   int TRAIT_COLOR1 = 15;
   int TRAIT_COLOR2 = 16;
   int TRAIT_COLOR3 = 17;
   int TRAIT_COLOR4 = 18;
   int TRAIT_DISEASE_PRONE = 19;
   int TRAIT_DISEASE_AVERTED = 20;
   int TRAIT_LONG_LIVED = 21;
   int TRAIT_CORRUPT = 22;
   int TRAIT_COLOR7 = 23;
   int TRAIT_COLOR5 = 24;
   int TRAIT_COLOR6 = 25;
   int TRAIT_RIFT = 27;
   int TRAIT_TRAITOR = 28;
   int TRAIT_VALREI_MISSION = 29;
   int TRAIT_COLOR8 = 30;
   int TRAIT_COLOR9 = 31;
   int TRAIT_COLOR10 = 32;
   int TRAIT_COLOR11 = 33;
   int TRAIT_COLOR12 = 34;
   int TRAIT_COLOR13 = 35;
   int TRAIT_COLOR14 = 36;
   int TRAIT_COLOR15 = 37;
   int TRAIT_COLOR16 = 38;
   int CURRENT_MAX_TRAIT = 34;
   int TRAIT_BRED = 63;
   int CURRENT_NUM_CREATURE_COLOURS = 13;
   String BROWN = "brown";
   String WHITE = "white";
   String BLACK = "black";
   String GOLD = "gold";
   String GREY = "grey";
   String PIEBALDPINTO = "piebaldPinto";
   String BLOODBAY = "bloodBay";
   String EBONYBLACK = "ebonyBlack";
   String SKEWBALDPINTO = "skewbaldpinto";
   String GOLDBUCKSKIN = "goldbuckskin";
   String BLACKSILVER = "blacksilver";
   String APPALOOSA = "appaloosa";
   String CHESTNUT = "chestnut";
   String MESSAGE_FORMAT_UTF_8 = "UTF-8";
   String vocals = "aeiouyAEIOUY";
   byte COMMON = 0;
   byte RARE = 1;
   byte SUPREME = 2;
   byte FANTASTIC = 3;
   byte USE_ACTIVE_ITEM_MAYBE = 0;
   byte USE_ACTIVE_ITEM_ALWAYS = 1;
   byte USE_ACTIVE_ITEM_NEVER = 2;
   byte A_TYPE_DIAMOND = 5;
   byte A_TYPE_GOLD = 4;
   byte A_TYPE_SILVER = 3;
   byte A_TYPE_STEEL = 2;
   float BLOCKER_GENERAL_HALF_THICKNESS = 0.1F;
   float BLOCKER_GENERAL_PADDING = 0.1F;
   int FLAG_STRUCTUREDOOR = 0;
   int FLAG_NO_PMS = 1;
   int FLAG_CROSS_KINGDOM = 2;
   int FLAG_CROSS_SERVER = 3;
   int FLAG_FRIENDS_OVERRIDE = 4;
   int FLAG_RECEIVED_GOAL_KARMA = 5;
   int FLAG_WON_THE_GAME = 6;
   int FLAG_HIDE_EQUIP_OPTIONS = 7;
   int FLAG_SENT_EXPIRY_WARNING = 8;
   int FLAG_PREMIUM_EXPIRED = 9;
   int FLAG_RECEIVED_PREM_BONUS = 10;
   int FLAG_SWITCHED_SKILLS = 11;
   int FLAG_PLONK_FIRST_DAMAGE = 12;
   int FLAG_PLONK_LOW_STAMINA = 13;
   int FLAG_PLONK_HUNGRY = 14;
   int FLAG_PLONK_THIRSTY = 15;
   int FLAG_PLONK_FALL_DAMAGE = 16;
   int FLAG_PLONK_SWIMMING = 17;
   int FLAG_PLONK_DEATH = 18;
   int FLAG_PLONK_FIRST_TIME_ON_A_BOAT = 19;
   int FLAG_PLONK_ENCUMBERED = 20;
   int FLAG_VILLAGE_TELEPORT = 21;
   int FLAG_PLONK_TREE_ACTIONS = 22;
   int FLAG_PLONK_BOAT_SECURITY = 23;
   int FLAG_HIDE_TITLE_ABILITY = 24;
   int FLAG_HIDE_TITLE_CULTIST = 25;
   int FLAG_IS_QA_ACCOUNT = 26;
   int FLAG_ACK_CHALLENGE = 27;
   int FLAG_CHECKED_AWARDS = 28;
   int FLAG_KINGDOM_CHAT = 29;
   int FLAG_GLOBAL_KINGDOM_CHAT = 30;
   int FLAG_TRADE_CHANNEL = 31;
   int FLAG_LOOT_ALLIANCE = 32;
   int FLAG_LOOT_VILLAGE = 33;
   int FLAG_LOOT_TRUSTED_FRIENDS = 34;
   int FLAG_KINGDOM_MESSAGE = 35;
   int FLAG_GLOBAL_KINGDOM_MESSAGE = 36;
   int FLAG_TRADE_MESSAGE = 37;
   int FLAG_VILLAGE_CHAT = 38;
   int FLAG_VILLAGE_MESSAGE = 39;
   int FLAG_ALLIANCE_CHAT = 40;
   int FLAG_ALLIANCE_MESSAGE = 41;
   int FLAG_DONE_TUTORIAL = 42;
   int FLAG_SB_IDLEOFF = 43;
   int FLAG_PVP_BLOCK = 44;
   int FLAG_HIDE_GV_HELP = 45;
   int FLAG_RECEIVED_GIFTPACK = 46;
   int FLAG_SHOULD_RECEIVE_RETURNERSPACK = 47;
   int FLAG_SHOULD_RECEIVE_GM_PAYMENT = 48;
   int FLAG_CHECKED_FOR_EXTRAGIFT = 49;
   int FLAG_HAS_A_NAMED_RECIPE = 50;
   int FLAG_IS_A_TESTER = 51;
   int FLAG_HIDE_CCFP = 52;
   int FLAG_NEW_AFFINITY_CALC = 53;
   int FLAG_NO_WAGONER_CHAT = 54;
   int FLAG_ANNIVERSARY_GIFT = 55;
   int FLAG_SEE_OTHER_PLAYER_TITLES = 56;
   int FLAG_SEE_OTHER_VILLAGE_TITLES = 57;
   int FLAG_SHOW_OWN_VILLAGE_TITLES = 58;
   int FLAG_HIDE_MY_PVE_DEATHS = 59;
   int FLAG_IGNORE_PVE_DEATHS_TAB = 60;
   int FLAG_FIXED_PREMIUM_ACHIEVEMENTS = 61;
   int FLAG_RECEIVED_XMAS_PRESENT = 62;
   int FLAG_CODE_ONLY_PREM = 63;
   int FLAG_CURRENT_MAX = 63;
   int FLAG_JOURNAL_COMPT0 = 64;
   int FLAG_JOURNAL_COMPT1 = 65;
   int FLAG_JOURNAL_COMPT2 = 66;
   int FLAG_JOURNAL_COMPT3 = 67;
   int FLAG_JOURNAL_COMPT4 = 68;
   int FLAG_JOURNAL_COMPT5 = 69;
   int FLAG_JOURNAL_COMPT6 = 70;
   int FLAG_JOURNAL_COMPT7 = 71;
   int FLAG_JOURNAL_COMPT8 = 72;
   int FLAG_JOURNAL_COMPT9 = 73;
   int FLAG_USED_FAITH_SWAP = 74;
   int FLAG_CHAOS_BORDER_CROSSED = 75;
   int FLAG_CANUSE_TUTORIALPORTAL = 76;
   int FLAG_INC_SB_CAP = 77;
   int FLAG_JOURNAL_COMPP1 = 78;
   int FLAG_JOURNAL_COMPP2 = 79;
   int FLAG_JOURNAL_COMPP3 = 80;
   int FLAG_INC_FAITH_CAP = 81;
   int FLAG_INC_SPELL_POWER = 82;
   int FLAG2_CURRENT_MAX = 82;
   int ABILITY_UNUSED_FOR_NOW = 0;
   int ABILITY_WITCH = 1;
   int ABILITY_HAG = 2;
   int ABILITY_CRONE = 3;
   int ABILITY_NIGHTHAG = 4;
   int ABILITY_ENCHANTRESS = 5;
   int ABILITY_NORN = 6;
   int ABILITY_FORTUNETELLER = 7;
   int ABILITY_MESMERIZER = 8;
   int ABILITY_SOOTHSAYER = 9;
   int ABILITY_MEDIUM = 10;
   int ABILITY_SIREN = 11;
   int ABILITY_DIVINER = 12;
   int ABILITY_INQUISITOR = 13;
   int ABILITY_WITCHDOCTOR = 14;
   int ABILITY_NECROMANCER = 15;
   int ABILITY_OCCULTIST = 16;
   int ABILITY_DEATHKNIGHT = 17;
   int ABILITY_DIABOLIST = 18;
   int ABILITY_HYPNOTIST = 19;
   int ABILITY_EVOCATOR = 20;
   int ABILITY_THAUMATURG = 21;
   int ABILITY_WARLOCK = 22;
   int ABILITY_MAGICIAN = 23;
   int ABILITY_CONJURER = 24;
   int ABILITY_MAGUS = 25;
   int ABILITY_ARCHMAGE = 26;
   int ABILITY_WITCHHUNTER = 27;
   int ABILITY_WIZARD = 28;
   int ABILITY_SUMMONER = 29;
   int ABILITY_SPELLBINDER = 30;
   int ABILITY_ILLUSIONIST = 31;
   int ABILITY_ENCHANTER = 32;
   int ABILITY_DRUID = 33;
   int ABILITY_SORCEROR = 34;
   int ABILITY_SORCERESS = 35;
   int ABILITY_DEMON_QUEEN = 36;
   int ABILITY_MAGE = 37;
   int ABILITY_SHADOWMAGE = 38;
   int ABILITY_ASCENDED = 39;
   int ABILITY_PLANESWALKER = 40;
   int ABILITY_WORGMASTER = 41;
   int ABILITY_VALKYRIE = 42;
   int ABILITY_BERSERKER = 43;
   int ABILITY_INCINERATOR = 44;
   int ABILITY_CURRENT_MAX = 44;
   int SESSIONFLAG_SIGNEDIN = 0;
   int SESSIONFLAG_AFK = 1;
   int SESSIONFLAG_SEND_EXTRA_BYTES = 2;
   int SESSIONFLAG_CREATION_WINDOW_OPEN = 3;
   int SESSIONFLAG_CURRENT_MAX = 3;
   byte TICKET_NOTE = 0;
   byte TICKET_CANCELLED = 1;
   byte TICKET_CM_RESPONDED = 2;
   byte TICKET_GM_RESPONDED = 3;
   byte TICKET_ARCH_RESPONDED = 4;
   byte TICKET_DEV_RESPONDED = 5;
   byte TICKET_FORWARD_GM = 6;
   byte TICKET_FORWARD_ARCH = 7;
   byte TICKET_FORWARD_DEV = 8;
   byte TICKET_RESOLVED = 9;
   byte TICKET_ON_HOLD = 10;
   byte TICKET_TAKEN = 11;
   byte TICKET_FORWARD_CM = 13;
   byte TICKET_FEEDBACK = 14;
   byte TICKET_REOPENED = 15;
   int UNDEAD_NOT = 0;
   int UNDEAD_ZOMBIE = 1;
   int UNDEAD_SKELETON = 2;
   int UNDEAD_GHOST = 3;
   int UNDEAD_SPECTRE = 4;
   int UNDEAD_LICH = 5;
   int UNDEAD_LICH_KING = 6;
   int UNDEAD_GHAST = 7;
   int UNDEAD_GHOUL = 8;
   long NEWBIE_END = 86400000L;
   float LIMIT_HEAVY = -0.3F;
   float LIMIT_MEDIUM = -0.15F;
   float LIMIT_LIGHT = 0.0F;
   float LIMIT_NONE = 0.3F;
   long HAVENS_LANDING_TOKENID = 7689502046815490L;

   static String getDirectionString(byte direction) {
      switch(direction) {
         case 0:
            return "north";
         case 1:
            return "northeast";
         case 2:
            return "east";
         case 3:
            return "southeast";
         case 4:
            return "south";
         case 5:
            return "southwest";
         case 6:
            return "west";
         case 7:
            return "northwest";
         default:
            return "unknown";
      }
   }

   static BitSet createBitSetLong(long fromLong) {
      BitSet bitSet = new BitSet(64);

      for(int x = 0; x < 64; ++x) {
         if (x == 0) {
            if ((fromLong & 1L) == 1L) {
               bitSet.set(x, true);
            } else {
               bitSet.set(x, false);
            }
         } else if ((fromLong >> x & 1L) == 1L) {
            bitSet.set(x, true);
         } else {
            bitSet.set(x, false);
         }
      }

      return bitSet;
   }

   static long bitSetToLong(BitSet bitSet) {
      long ret = 0L;

      for(int x = 0; x < 64; ++x) {
         if (bitSet.get(x)) {
            ret += 1L << x;
         }
      }

      return ret;
   }
}
